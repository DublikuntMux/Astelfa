plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.8.0'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://ladysnake.jfrog.io/artifactory/mods" }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
}

loom {
    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"
    modImplementation "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}"

    modApi "com.terraformersmc:modmenu:${modmenu_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modCompileOnly "dev.emi:emi:${emi_version}+${minecraft_version}:api"
    modLocalRuntime "dev.emi:emi:${emi_version}+${minecraft_version}"
}

processResources {
    inputs.property "version", version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "loader_version", loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version,
                "minecraft_version": minecraft_version,
                "loader_version": loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.mod_id
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
